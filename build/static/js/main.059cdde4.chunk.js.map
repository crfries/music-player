{"version":3,"sources":["components/Player.js","components/Song.js","components/LibrarySong.js","components/Library.js","components/Nav.js","components/Data.js","App.js","reportWebVitals.js","index.js"],"names":["Player","audioRef","currentSong","isPlaying","setIsPlaying","songInfo","setSongInfo","songs","setCurrentSong","setSongs","activeLibraryHandler","nextPrev","newSongs","map","song","id","active","trackAnim","transform","animationPercentage","trackColor","background","color","getTime","time","Math","floor","slice","skipTrackHandler","direction","a","currentIndex","findIndex","length","current","play","className","currentTime","style","min","max","duration","value","type","onChange","e","target","onClick","size","icon","faAngleLeft","pause","faPause","faPlay","faAngleRight","Song","alt","name","src","cover","artist","LibrarySong","Library","libraryStatus","Nav","setLibraryStatus","faMusic","chillHop","audio","uuidv4","App","useRef","useState","data","timeUpdateHandler","roundedCurrent","round","roundedDuration","animation","songEndHandler","onLoadedMetadata","onTimeUpdate","ref","onEnded","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.059cdde4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faPlay,\r\n  faAngleLeft,\r\n  faAngleRight,\r\n  faPause,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Player = ({\r\n  audioRef,\r\n  currentSong,\r\n  isPlaying,\r\n  setIsPlaying,\r\n  songInfo,\r\n  setSongInfo,\r\n  songs,\r\n  setCurrentSong,\r\n  setSongs,\r\n}) => {\r\n\r\n  //checks the current id to see if its equal to song if. if it is it sets to active\r\n  const activeLibraryHandler = (nextPrev) => {\r\n    const newSongs = songs.map((song) => {\r\n      if (song.id === nextPrev.id) {\r\n        return {\r\n          ...song,\r\n          active: true,\r\n        };\r\n      } else {\r\n        return {\r\n          ...song,\r\n          active: false,\r\n        };\r\n      }\r\n    });\r\n    setSongs(newSongs);\r\n  };\r\n\r\n  //Event Handler - checks if song is playing or paused and sets isPlaying to opposite for play/pause icon\r\n  const playSongHandler = () => {\r\n    if (isPlaying) {\r\n      audioRef.current.pause();\r\n      setIsPlaying(!isPlaying);\r\n    } else {\r\n      audioRef.current.play();\r\n      setIsPlaying(!isPlaying);\r\n    }\r\n  };\r\n\r\n  //Add styles\r\n  const trackAnim = {\r\n    transform: `translateX(${songInfo.animationPercentage}%)`,\r\n  };\r\n\r\n  const trackColor = {\r\n    background: `linear-gradient(to right, ${currentSong.color[0]},${currentSong.color[1]})`,\r\n  };\r\n\r\n  //sets the drag handler to correct spot its dragged to\r\n  const dragHandler = (e) => {\r\n    audioRef.current.currentTime = e.target.value;\r\n    setSongInfo({ ...songInfo, currentTime: e.target.value });\r\n  };\r\n\r\n  //creates a round number to be displayed in the current play time\r\n  const getTime = (time) => {\r\n    return (\r\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n    );\r\n  };\r\n\r\n  const skipTrackHandler = async (direction) => {\r\n    //getting current index of where the song is\r\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\r\n    \r\n    //checks which way track is being skipped and sets cuurentsong and active correctly\r\n    if (direction === \"skip-forward\") {\r\n      await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\r\n      activeLibraryHandler(songs[(currentIndex + 1) % songs.length]);\r\n    }\r\n    if (direction === \"skip-back\") {\r\n      if ((currentIndex - 1) % songs.length === -1) {\r\n        await setCurrentSong(songs[songs.length - 1]);\r\n        activeLibraryHandler(songs[songs.length - 1]);\r\n        if (isPlaying) audioRef.current.play();\r\n        return;\r\n      }\r\n      await setCurrentSong(songs[(currentIndex - 1) % songs.length]);\r\n      activeLibraryHandler(songs[(currentIndex - 1) % songs.length]);\r\n    }\r\n\r\n    if (isPlaying) audioRef.current.play();\r\n  };\r\n\r\n  return (\r\n    <div className=\"player\">\r\n      <div className=\"time-control\">\r\n        <p>{getTime(songInfo.currentTime)}</p>\r\n        <div style={trackColor} className=\"track\">\r\n          <input\r\n            min={0}\r\n            max={songInfo.duration || 0}\r\n            value={songInfo.currentTime}\r\n            type=\"range\"\r\n            onChange={dragHandler}\r\n          />\r\n          <div style={trackAnim} className=\"animate-track\"></div>\r\n        </div>\r\n        <p>{songInfo.duration ? getTime(songInfo.duration) : \"0:00\"}</p>\r\n      </div>\r\n      <div className=\"play-control\">\r\n        <FontAwesomeIcon\r\n          onClick={() => skipTrackHandler(\"skip-back\")}\r\n          className=\"skip-back\"\r\n          size=\"2x\"\r\n          icon={faAngleLeft}\r\n        />\r\n        <FontAwesomeIcon\r\n          onClick={playSongHandler}\r\n          className=\"play\"\r\n          size=\"2x\"\r\n          icon={isPlaying ? faPause : faPlay}\r\n        />\r\n        <FontAwesomeIcon\r\n          onClick={() => skipTrackHandler(\"skip-forward\")}\r\n          className=\"skip-forward\"\r\n          size=\"2x\"\r\n          icon={faAngleRight}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","import React from \"react\";\r\n\r\nconst Song = ({ currentSong }) => {\r\n  return (\r\n    <div className=\"song-container\">\r\n      <img alt={currentSong.name} src={currentSong.cover}></img>\r\n      <h2>{currentSong.name}</h2>\r\n      <h3>{currentSong.artist}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Song;\r\n","import React from \"react\";\r\n\r\nconst LibrarySong = ({\r\n  song,\r\n  songs,\r\n  setCurrentSong,\r\n  id,\r\n  audioRef,\r\n  isPlaying,\r\n  setSongs,\r\n}) => {\r\n  const songSelectHandler = () => {\r\n    setCurrentSong(song);\r\n\r\n    //set active state based on song id\r\n    const newSongs = songs.map((song) => {\r\n      if (song.id === id) {\r\n        return {\r\n          ...song,\r\n          active: true,\r\n        };\r\n      } else {\r\n        return {\r\n          ...song,\r\n          active: false,\r\n        };\r\n      }\r\n    });\r\n\r\n    setSongs(newSongs);\r\n\r\n    if (isPlaying) audioRef.current.play();\r\n  };\r\n\r\n  return (\r\n    <div\r\n      onClick={songSelectHandler}\r\n      className={`library-song ${song.active ? \"selected\" : \"\"}`}\r\n    >\r\n      <img alt={song.name} src={song.cover}></img>\r\n      <div className=\"song-description\">\r\n        <h3>{song.name}</h3>\r\n        <h4>{song.artist}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LibrarySong;\r\n","import React from \"react\";\r\nimport LibrarySong from \"./LibrarySong\";\r\n\r\nconst Library = ({\r\n  songs,\r\n  setCurrentSong,\r\n  audioRef,\r\n  isPlaying,\r\n  setSongs,\r\n  libraryStatus,\r\n}) => {\r\n  return (\r\n    //maps out over all the data objects passed in and sets the props \r\n    <div className={`library ${libraryStatus ? \"active-library\" : \"\"}`}>\r\n      <h2>Library</h2>\r\n      <div className=\"library-songs\">\r\n        {songs.map((song) => (\r\n          <LibrarySong\r\n            songs={songs}\r\n            setCurrentSong={setCurrentSong}\r\n            song={song}\r\n            id={song.id}\r\n            key={song.id}\r\n            audioRef={audioRef}\r\n            isPlaying={isPlaying}\r\n            setSongs={setSongs}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Library;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMusic } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n//sets the library state to active on button click\r\nconst Nav = ({ setLibraryStatus, libraryStatus }) => {\r\n  return (\r\n    <nav>\r\n      <h1>Music</h1>\r\n      <button onClick={() => setLibraryStatus(!libraryStatus)}>\r\n        Library\r\n        <FontAwesomeIcon icon={faMusic} />\r\n      </button>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import { v4 as uuidv4 } from \"uuid\";\r\n\r\nfunction chillHop() {\r\n  return [\r\n    {\r\n      name: \"Serendipity\",\r\n      cover:\r\n        \"https://chillhop.com/wp-content/uploads/2020/09/2899f7cc22ab12e17d0119819aac3ca9dbab46e6-1024x1024.jpg\",\r\n      artist: \"Philanthrope\",\r\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=10249\",\r\n      color: [\"#383b26\", \"#aa3b33\"],\r\n      id: uuidv4(),\r\n      active: true,\r\n    },\r\n    {\r\n      name: \"Ful Off\",\r\n      cover:\r\n        \"https://chillhop.com/wp-content/uploads/2020/07/c85a5f6166a48001820ba3dc7e1da639281e00b3-1024x1024.jpg\",\r\n      artist: \"Nokiaa, Nofeels\",\r\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=8888\",\r\n      color: [\"#c2bfac\", \"#fed39e\"],\r\n      id: uuidv4(),\r\n      active: false,\r\n    },\r\n    {\r\n      name: \"Slim Bobby\",\r\n      cover:\r\n        \"https://chillhop.com/wp-content/uploads/2020/10/23fdd99adc3e16abcb67b004ea3e748ebf433a49-1024x1024.jpg\",\r\n      artist: \"Aviino\",\r\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=10448\",\r\n      color: [\"#437abc\", \"#ea7496\"],\r\n      id: uuidv4(),\r\n      active: false,\r\n    },\r\n    {\r\n      name: \"The End\",\r\n      cover:\r\n        \"https://chillhop.com/wp-content/uploads/2020/07/f9ad13db0a7c6e6a086a3a17a15ff92cd69b2d7e-1024x1024.jpg\",\r\n      artist: \"Philanthrope, Fujitsu\",\r\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=8518\",\r\n      color: [\"#000000\", \"#bababa\"],\r\n      id: uuidv4(),\r\n      active: false,\r\n    },\r\n    {\r\n      name: \"Flushing the Stairs\",\r\n      cover:\r\n        \"https://chillhop.com/wp-content/uploads/2020/09/6defa6c89a6902fdd84bccd720c2b8fd29c40990-1024x1024.jpg\",\r\n      artist: \"Leavv\",\r\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9917\",\r\n      color: [\"#559362\", \"#acb17d\"],\r\n      id: uuidv4(),\r\n      active: false,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default chillHop;\r\n","import React, { useState, useRef } from \"react\";\nimport \"./styles/app.css\";\n\n//Adding components\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\";\n\n//import utilities\nimport data from \"./components/Data\";\n\nfunction App() {\n  //ref\n  const audioRef = useRef(null);\n  //state\n  const [libraryStatus, setLibraryStatus] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0,\n  });\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  //function that sets the drag handler for song update time\n  const timeUpdateHandler = (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n\n    //calculate percentage variables\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round((roundedCurrent / roundedDuration) * 100);\n\n    setSongInfo({\n      ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation,\n    });\n  };\n\n  //sets the next song after the current ends\n  const songEndHandler = async () => {\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n    await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n    if (isPlaying) audioRef.current.play();\n  };\n\n  return (\n    <div className={` App ${libraryStatus ? \"library-active\" : \"\"}`}>\n      <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} />\n      <Song currentSong={currentSong} />\n      <Player\n        songs={songs}\n        setSongInfo={setSongInfo}\n        songInfo={songInfo}\n        audioRef={audioRef}\n        setIsPlaying={setIsPlaying}\n        isPlaying={isPlaying}\n        currentSong={currentSong}\n        setCurrentSong={setCurrentSong}\n        setSongs={setSongs}\n      />\n      <Library\n        audioRef={audioRef}\n        songs={songs}\n        setCurrentSong={setCurrentSong}\n        isPlaying={isPlaying}\n        setSongs={setSongs}\n        libraryStatus={libraryStatus}\n      />\n      <audio\n        onLoadedMetadata={timeUpdateHandler}\n        onTimeUpdate={timeUpdateHandler}\n        ref={audioRef}\n        src={currentSong.audio}\n        onEnded={songEndHandler}\n      ></audio>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}